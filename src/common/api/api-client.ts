/* eslint-disable @typescript-eslint/member-ordering */
/**
 * This file was automatically generated by `bwcx-api-client`.
 * DO NOT MODIFY IT BY HAND.
 */

import { AllowedRequestMethod, IBwcxApiRequestAdaptorArgs, AbstractResponseParser } from 'bwcx-api-client';
import { configure as configureUrlcat } from 'urlcat-fork';
import { DemoGetReqDTO, DemoGetRespDTO } from '../modules/demo/demo.dto';
import { ItemReqDTO, ItemResDTO } from '../modules/items/item.dto';
import { LoginReqDTO, LoginResDTO } from '../modules/login/login.dto';

const urlcat = configureUrlcat({ arrayFormat: 'repeat' });

export class ApiClient<T = undefined> {
  private readonly _r: (args: IBwcxApiRequestAdaptorArgs<T>) => Promise<any>;
  private readonly _rp: AbstractResponseParser;

  public constructor(
    requestAdapter: { request: (args: IBwcxApiRequestAdaptorArgs<T>) => Promise<any> },
    responseParser: AbstractResponseParser,
  ) {
    this._r = requestAdapter.request;
    this._rp = responseParser;
  }

  /**
   * 一个示例接口
   *
   * @param {DemoGetReqDTO} req The request data (compatible with ReqDTO).
   * @param {T} opts Extra request options.
   * @returns {DemoGetRespDTO} The response data (RespDTO).
   */
  public async demoGet(req: DemoGetReqDTO, opts?: T): Promise<DemoGetRespDTO> {
    return this._r(this._rArgs.a(req, opts)).then((resp) => this._rp.pat(DemoGetRespDTO, resp));
  }

  /**
   * Get all items
   *
   * @param {ItemReqDTO} req The request data (compatible with ReqDTO).
   * @param {T} opts Extra request options.
   * @returns {ItemResDTO} The response data (RespDTO).
   */
  public async getAllItems(req: ItemReqDTO, opts?: T): Promise<ItemResDTO> {
    return this._r(this._rArgs.b(req, opts)).then((resp) => this._rp.pat(ItemResDTO, resp));
  }

  /**
   * User login
   *
   * @param {LoginReqDTO} req The request data (compatible with ReqDTO).
   * @param {T} opts Extra request options.
   * @returns {LoginResDTO} The response data (RespDTO).
   */
  public async login(req: LoginReqDTO, opts?: T): Promise<LoginResDTO> {
    return this._r(this._rArgs.c(req, opts)).then((resp) => this._rp.pat(LoginResDTO, resp));
  }

  /**
   * User logout
   *
   * @param {null} req The request data (compatible with ReqDTO).
   * @param {T} opts Extra request options.
   * @returns {LoginResDTO} The response data (RespDTO).
   */
  public async logout(req?: null, opts?: T): Promise<LoginResDTO> {
    return this._r(this._rArgs.d(req, opts)).then((resp) => this._rp.pat(LoginResDTO, resp));
  }

  private _rArgs = {
    a: (req: DemoGetReqDTO, opts?: any) => {
      return {
        method: 'GET' as AllowedRequestMethod,
        url: this._uf('/api/demoGet/:id', {
          param: {
            id: req.id,
          },
          query: {
            page: req.page,
          },
        }),
        data: {},
        extraOpts: opts,
        metadata: {
          name: 'demoGet',
          method: 'GET',
          path: '/api/demoGet/:id',
          req: DemoGetReqDTO,
          resp: DemoGetRespDTO,
        },
      };
    },
    b: (req: ItemReqDTO, opts?: any) => {
      return {
        method: 'GET' as AllowedRequestMethod,
        url: this._uf('/api/items', {
          param: {},
          query: {},
        }),
        data: {},
        extraOpts: opts,
        metadata: {
          name: 'getAllItems',
          method: 'GET',
          path: '/api/items',
          req: ItemReqDTO,
          resp: ItemResDTO,
        },
      };
    },
    c: (req: LoginReqDTO, opts?: any) => {
      return {
        method: 'POST' as AllowedRequestMethod,
        url: this._uf('/api/login', {
          param: {},
          query: {},
        }),
        data: {
          username: req.username,
          password: req.password,
        },
        extraOpts: opts,
        metadata: {
          name: 'login',
          method: 'POST',
          path: '/api/login',
          req: LoginReqDTO,
          resp: LoginResDTO,
        },
      };
    },
    d: (req: null, opts?: any) => {
      return {
        method: 'POST' as AllowedRequestMethod,
        url: this._uf('/api/logout', {
          param: {},
          query: {},
        }),
        data: {},
        extraOpts: opts,
        metadata: {
          name: 'logout',
          method: 'POST',
          path: '/api/logout',
          req: null as null,
          resp: LoginResDTO,
        },
      };
    },
  }

  private _uf(url: string, extra: { param?: object; query?: object } = {}): string {
    const { param, query } = extra;
    return urlcat(url, {
      ...param,
      ...query,
    });
  }
}
