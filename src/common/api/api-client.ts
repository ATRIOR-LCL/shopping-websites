/* eslint-disable @typescript-eslint/member-ordering */
/**
 * This file was automatically generated by `bwcx-api-client`.
 * DO NOT MODIFY IT BY HAND.
 */

import { AllowedRequestMethod, IBwcxApiRequestAdaptorArgs, AbstractResponseParser } from 'bwcx-api-client';
import { configure as configureUrlcat } from 'urlcat-fork';
import { GetCartReqDTO, GetCartResDTO, AddToCartReqDTO, AddToCartResDTO, ClearCartReqDTO, ClearCartResDTO, DeleteItemReqDTO, DeleteItemResDTO } from '../modules/cart/cart.dto';
import { DemoGetReqDTO, DemoGetRespDTO } from '../modules/demo/demo.dto';
import { ItemReqDTO, ItemResDTO } from '../modules/items/item.dto';
import { LoginReqDTO, LoginResDTO, RegisterReqDTO, RegisterResDTO, SessionResDTO, UploadResDTO } from '../modules/login/login.dto';

const urlcat = configureUrlcat({ arrayFormat: 'repeat' });

export class ApiClient<T = undefined> {
  private readonly _r: (args: IBwcxApiRequestAdaptorArgs<T>) => Promise<any>;
  private readonly _rp: AbstractResponseParser;

  public constructor(
    requestAdapter: { request: (args: IBwcxApiRequestAdaptorArgs<T>) => Promise<any> },
    responseParser: AbstractResponseParser,
  ) {
    this._r = requestAdapter.request;
    this._rp = responseParser;
  }

  /**
   * Get cart items
   *
   * @param {GetCartReqDTO} req The request data (compatible with ReqDTO).
   * @param {T} opts Extra request options.
   * @returns {GetCartResDTO} The response data (RespDTO).
   */
  public async getCart(req: GetCartReqDTO, opts?: T): Promise<GetCartResDTO> {
    return this._r(this._rArgs.a(req, opts)).then((resp) => this._rp.pat(GetCartResDTO, resp));
  }

  /**
   * Add item to cart
   *
   * @param {AddToCartReqDTO} req The request data (compatible with ReqDTO).
   * @param {T} opts Extra request options.
   * @returns {AddToCartResDTO} The response data (RespDTO).
   */
  public async addToCart(req: AddToCartReqDTO, opts?: T): Promise<AddToCartResDTO> {
    return this._r(this._rArgs.b(req, opts)).then((resp) => this._rp.pat(AddToCartResDTO, resp));
  }

  /**
   * Clear cart
   *
   * @param {ClearCartReqDTO} req The request data (compatible with ReqDTO).
   * @param {T} opts Extra request options.
   * @returns {ClearCartResDTO} The response data (RespDTO).
   */
  public async clearCart(req: ClearCartReqDTO, opts?: T): Promise<ClearCartResDTO> {
    return this._r(this._rArgs.c(req, opts)).then((resp) => this._rp.pat(ClearCartResDTO, resp));
  }

  /**
   * Delete Single Item from cart
   *
   * @param {DeleteItemReqDTO} req The request data (compatible with ReqDTO).
   * @param {T} opts Extra request options.
   * @returns {DeleteItemResDTO} The response data (RespDTO).
   */
  public async deleteItem(req: DeleteItemReqDTO, opts?: T): Promise<DeleteItemResDTO> {
    return this._r(this._rArgs.d(req, opts)).then((resp) => this._rp.pat(DeleteItemResDTO, resp));
  }

  /**
   * 一个示例接口
   *
   * @param {DemoGetReqDTO} req The request data (compatible with ReqDTO).
   * @param {T} opts Extra request options.
   * @returns {DemoGetRespDTO} The response data (RespDTO).
   */
  public async demoGet(req: DemoGetReqDTO, opts?: T): Promise<DemoGetRespDTO> {
    return this._r(this._rArgs.e(req, opts)).then((resp) => this._rp.pat(DemoGetRespDTO, resp));
  }

  /**
   * Get all items
   *
   * @param {ItemReqDTO} req The request data (compatible with ReqDTO).
   * @param {T} opts Extra request options.
   * @returns {ItemResDTO} The response data (RespDTO).
   */
  public async getAllItems(req: ItemReqDTO, opts?: T): Promise<ItemResDTO> {
    return this._r(this._rArgs.f(req, opts)).then((resp) => this._rp.pat(ItemResDTO, resp));
  }

  /**
   * User login
   *
   * @param {LoginReqDTO} req The request data (compatible with ReqDTO).
   * @param {T} opts Extra request options.
   * @returns {LoginResDTO} The response data (RespDTO).
   */
  public async login(req: LoginReqDTO, opts?: T): Promise<LoginResDTO> {
    return this._r(this._rArgs.g(req, opts)).then((resp) => this._rp.pat(LoginResDTO, resp));
  }

  /**
   * User register
   *
   * @param {RegisterReqDTO} req The request data (compatible with ReqDTO).
   * @param {T} opts Extra request options.
   * @returns {RegisterResDTO} The response data (RespDTO).
   */
  public async register(req: RegisterReqDTO, opts?: T): Promise<RegisterResDTO> {
    return this._r(this._rArgs.h(req, opts)).then((resp) => this._rp.pat(RegisterResDTO, resp));
  }

  /**
   * User logout
   *
   * @param {null} req The request data (compatible with ReqDTO).
   * @param {T} opts Extra request options.
   * @returns {LoginResDTO} The response data (RespDTO).
   */
  public async logout(req?: null, opts?: T): Promise<LoginResDTO> {
    return this._r(this._rArgs.i(req, opts)).then((resp) => this._rp.pat(LoginResDTO, resp));
  }

  /**
   * 获取用户会话信息
   *
   * @param {null} req The request data (compatible with ReqDTO).
   * @param {T} opts Extra request options.
   * @returns {SessionResDTO} The response data (RespDTO).
   */
  public async getSession(req?: null, opts?: T): Promise<SessionResDTO> {
    return this._r(this._rArgs.j(req, opts)).then((resp) => this._rp.pat(SessionResDTO, resp));
  }

  /**
   * 上传用户头像
   *
   * @param {null} req The request data (compatible with ReqDTO).
   * @param {T} opts Extra request options.
   * @returns {UploadResDTO} The response data (RespDTO).
   */
  public async uploadAvatar(req?: null, opts?: T): Promise<UploadResDTO> {
    return this._r(this._rArgs.k(req, opts)).then((resp) => this._rp.pat(UploadResDTO, resp));
  }

  private _rArgs = {
    a: (req: GetCartReqDTO, opts?: any) => {
      return {
        method: 'POST' as AllowedRequestMethod,
        url: this._uf('/api/cart', {
          param: {},
          query: {},
        }),
        data: {},
        extraOpts: opts,
        metadata: {
          name: 'getCart',
          method: 'POST',
          path: '/api/cart',
          req: GetCartReqDTO,
          resp: GetCartResDTO,
        },
      };
    },
    b: (req: AddToCartReqDTO, opts?: any) => {
      return {
        method: 'POST' as AllowedRequestMethod,
        url: this._uf('/api/cart/add', {
          param: {},
          query: {},
        }),
        data: {},
        extraOpts: opts,
        metadata: {
          name: 'addToCart',
          method: 'POST',
          path: '/api/cart/add',
          req: AddToCartReqDTO,
          resp: AddToCartResDTO,
        },
      };
    },
    c: (req: ClearCartReqDTO, opts?: any) => {
      return {
        method: 'POST' as AllowedRequestMethod,
        url: this._uf('/api/cart/clear', {
          param: {},
          query: {},
        }),
        data: {},
        extraOpts: opts,
        metadata: {
          name: 'clearCart',
          method: 'POST',
          path: '/api/cart/clear',
          req: ClearCartReqDTO,
          resp: ClearCartResDTO,
        },
      };
    },
    d: (req: DeleteItemReqDTO, opts?: any) => {
      return {
        method: 'POST' as AllowedRequestMethod,
        url: this._uf('/api/cart/deleteItem', {
          param: {},
          query: {},
        }),
        data: {},
        extraOpts: opts,
        metadata: {
          name: 'deleteItem',
          method: 'POST',
          path: '/api/cart/deleteItem',
          req: DeleteItemReqDTO,
          resp: DeleteItemResDTO,
        },
      };
    },
    e: (req: DemoGetReqDTO, opts?: any) => {
      return {
        method: 'GET' as AllowedRequestMethod,
        url: this._uf('/api/demoGet/:id', {
          param: {
            id: req.id,
          },
          query: {
            page: req.page,
          },
        }),
        data: {},
        extraOpts: opts,
        metadata: {
          name: 'demoGet',
          method: 'GET',
          path: '/api/demoGet/:id',
          req: DemoGetReqDTO,
          resp: DemoGetRespDTO,
        },
      };
    },
    f: (req: ItemReqDTO, opts?: any) => {
      return {
        method: 'GET' as AllowedRequestMethod,
        url: this._uf('/api/items', {
          param: {},
          query: {},
        }),
        data: {},
        extraOpts: opts,
        metadata: {
          name: 'getAllItems',
          method: 'GET',
          path: '/api/items',
          req: ItemReqDTO,
          resp: ItemResDTO,
        },
      };
    },
    g: (req: LoginReqDTO, opts?: any) => {
      return {
        method: 'POST' as AllowedRequestMethod,
        url: this._uf('/api/login', {
          param: {},
          query: {},
        }),
        data: {
          username: req.username,
          password: req.password,
        },
        extraOpts: opts,
        metadata: {
          name: 'login',
          method: 'POST',
          path: '/api/login',
          req: LoginReqDTO,
          resp: LoginResDTO,
        },
      };
    },
    h: (req: RegisterReqDTO, opts?: any) => {
      return {
        method: 'POST' as AllowedRequestMethod,
        url: this._uf('/api/register', {
          param: {},
          query: {},
        }),
        data: {
          username: req.username,
          password: req.password,
          confirmPassword: req.confirmPassword,
        },
        extraOpts: opts,
        metadata: {
          name: 'register',
          method: 'POST',
          path: '/api/register',
          req: RegisterReqDTO,
          resp: RegisterResDTO,
        },
      };
    },
    i: (req: null, opts?: any) => {
      return {
        method: 'POST' as AllowedRequestMethod,
        url: this._uf('/api/logout', {
          param: {},
          query: {},
        }),
        data: {},
        extraOpts: opts,
        metadata: {
          name: 'logout',
          method: 'POST',
          path: '/api/logout',
          req: null as null,
          resp: LoginResDTO,
        },
      };
    },
    j: (req: null, opts?: any) => {
      return {
        method: 'GET' as AllowedRequestMethod,
        url: this._uf('/api/getSession', {
          param: {},
          query: {},
        }),
        data: {},
        extraOpts: opts,
        metadata: {
          name: 'getSession',
          method: 'GET',
          path: '/api/getSession',
          req: null as null,
          resp: SessionResDTO,
        },
      };
    },
    k: (req: null, opts?: any) => {
      return {
        method: 'POST' as AllowedRequestMethod,
        url: this._uf('/api/upload', {
          param: {},
          query: {},
        }),
        data: {},
        extraOpts: opts,
        metadata: {
          name: 'uploadAvatar',
          method: 'POST',
          path: '/api/upload',
          req: null as null,
          resp: UploadResDTO,
        },
      };
    },
  }

  private _uf(url: string, extra: { param?: object; query?: object } = {}): string {
    const { param, query } = extra;
    return urlcat(url, {
      ...param,
      ...query,
    });
  }
}
